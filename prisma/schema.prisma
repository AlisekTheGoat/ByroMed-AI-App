generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Patient {
  id               String    @id @default(uuid())
  firstName        String
  lastName         String
  birthNumber      String    @map("birth_number")
  dateOfBirth      DateTime?
  gender           String
  phone            String?
  email            String?
  insurance        String?
  insuranceCode    String?
  address          String?
  city             String?
  employerOrSchool String?
  notes            String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // BACK-RELATION (oprava)
  exportedDocuments ExportedDocument[]

  @@unique([birthNumber])
  @@index([lastName, firstName])
}

model Template {
  id        String   @id
  name      String
  version   Int
  kind      String // 'text_template' | 'form_with_fields'
  path      String // cesta na disku k balíčku šablony
  exports   String // např. "pdf,docx"
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // BACK-RELATION (oprava)
  exportedDocuments ExportedDocument[]
}

model ExportedDocument {
  id         String   @id @default(uuid())
  templateId String
  patientId  String?
  outputPath String
  kind       String // 'pdf' | 'docx'
  createdAt  DateTime @default(now())

  // RELATIONS
  template Template @relation(fields: [templateId], references: [id])
  patient  Patient? @relation(fields: [patientId], references: [id])

  @@index([templateId])
  @@index([patientId])
}

model AgentRun {
  id           String    @id @default(uuid())
  taskId       String
  kind         String
  patientId    String?
  inputMeta    Json
  resultMeta   Json?
  startedAt    DateTime  @default(now())
  finishedAt   DateTime?
  status       String // 'running' | 'ok' | 'error' | 'cancelled'
  errorMessage String?

  // back-rel
  events AgentEvent[]

  @@index([startedAt])
  @@index([status])
}

model AgentEvent {
  id       String   @id @default(cuid())
  runId    String
  ts       DateTime @default(now())
  step     String
  message  String?
  progress Float?

  run AgentRun @relation(fields: [runId], references: [id], onDelete: Cascade)

  @@index([runId])
  @@index([ts])
}
